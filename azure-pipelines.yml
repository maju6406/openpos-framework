# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: $(BuildID)
  
trigger:
  batch: true
  branches:
    include:
    - master
    - releases/0.4
    - releases/0.5
    - burl/0.9

pool:
  vmImage: 'ubuntu-18.04'

steps:
- checkout: self
  persistCredentials: true
  clean: true
- script: mkdir ~/.ssh
- script: ssh-keyscan -p $(deployPort) -H $(deployServer) >> ~/.ssh/known_hosts
- task: Gradle@2
  inputs:
    workingDirectory: 'openpos-assemble'
    options: '--stacktrace -PdownloadNode=true -PbuildNumber=$(Build.BuildNumber) -PbuildName=$(Build.DefinitionName) -PgitHash=$(Build.SourceVersion) -PgitBranch=$(Build.SourceBranchName) -PdeployUser=$(deployUser) -PdeployPassword=$(deployPassword) -PdeploySftpUrl=$(deploySftpUrl)'
    gradleWrapperFile: 'openpos-assemble/gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST*.xml'
    tasks: 'test deploy generateSourceArtifact'
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Client Code Coverage'
  inputs: 
    codeCoverageTool: Cobertura
    summaryFileLocation: '**/*coverage.xml'
